@model FOS.Shared.RetailerData
@{
    ViewBag.Title = "Retailer";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    #map-canvas {
        width: 100%;
        height: 474px;
    }
</style>

<!-- BEGIN PAGE HEADER-->
<div class="row-fluid">
    <div class="span12">
        <h3 class="page-title"></h3>
        <ul class="breadcrumb">
            <li>
                <a href="#">Retailers</a>
                <span class="divider">/</span>
            </li>
            <li>
                <a href="#">Transfer Retailers</a>
            </li>
        </ul>
        <!-- END PAGE TITLE & BREADCRUMB-->
    </div>
</div>

<div class="row-fluid">
    <div class="span12">
        <!-- BEGIN EXAMPLE TABLE widget-->
        <div class="widget green" style="max-height:2000px">

            <div class="widget-title">
                <h4>Add New Distributor</h4>
            </div>

            <div class="widget-body" style="">
                <div>
                    <div class="clearfix">
                        @*<div class="btn-group">
                                <button id="editable-sample_new" class="btn green">
                                    Add New <i class="icon-plus"></i>
                                </button>
                            </div>*@
                        <div class="btn-group pull-right"></div>
                    </div>
                    @using (Ajax.BeginForm("NewUpdateTransferRetailers", "Dealer", new AjaxOptions { OnSuccess = "OnSuccess", OnFailure = "OnFailure" }, new { @class = "form-horizontal form-label-left", @style = "margin-top: -16px;" }))
                    {

                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true)

                        <div class="form-group">

                            <div class="span12" style="margin-bottom:500px;">

                                <div class="span3" style="margin-top: 0px;">



                                    <div class="control-group" style="margin-bottom: 10px">
                                        <label class="control-label">Select Zone *</label>
                                        <div class="controls" style="margin-left: 0px">
                                            @Html.DropDownListFor(model => model.RegionID, new SelectList(Model.Regions, "RegionID", "Name"), new { @class = "" })
                                            @Html.ValidationMessageFor(model => model.RegionID)
                                        </div>
                                    </div>

                                   


                                    <div class="control-group" style="margin-bottom: 10px">
                                        <label class="control-label">Transfer Range*</label>
                                        <div class="controls" style="margin-left: 0px">
                                            @Html.DropDownListFor(model => model.TransferRange, new SelectList(Model.Ranges, "RegionID", "Name"), new { @class = "" })
                                            @Html.ValidationMessageFor(model => model.TransferRange)
                                        </div>
                                    </div>
                                    <div class="control-group" style="margin-bottom: 10px">
                                        <label class="control-label">Transfer from Distributor*</label>
                                        <div class="controls" style="margin-left: 0px">
                                            @Html.DropDownListFor(model => model.TransferFrom, new SelectList(Model.Dealers, "ID", "Name"), new { @class = "" })
                                            @Html.ValidationMessageFor(model => model.TransferFrom)
                                        </div>
                                    </div>
                                    <div class="control-group" style="margin-bottom: 10px">
                                        <label class="control-label">Transfer To Range*</label>
                                        <div class="controls" style="margin-left: 0px">
                                            @Html.DropDownListFor(model => model.TransferToRange, new SelectList(Model.Ranges, "RegionID", "Name"), new { @class = "" })
                                            @Html.ValidationMessageFor(model => model.TransferToRange)
                                        </div>
                                    </div>
                                    <div class="control-group" style="margin-bottom: 10px">
                                        <label class="control-label">Transfer To Distributor*</label>
                                        <div class="controls" style="margin-left: 0px">
                                            @Html.DropDownListFor(model => model.TransferTo, new SelectList(Model.DealersTo, "ID", "Name"), new { @class = "" })
                                            @Html.ValidationMessageFor(model => model.TransferTo)
                                        </div>
                                    </div>

                                    <div class="control-group" style="margin-top: 10px">
                                        <div class="form-actions" style="float: right; padding-left: 0px; padding-right: 45px; margin-top: 40px;">
                                            <button type="submit" id="btnNew" class="btn btn-primary" style="margin-right: 8px; width: 100px;">
                                                <span id="create">Save</span>
                                            </button>
                                            @* <button type="button" id="btnRefresh" class="btn btn-info"><i class="icon-ban-circle icon-white" style="padding-right: 8px"></i>Reset</button>*@
                                        </div>
                                    </div>



                                </div>

                              

                           

                            </div>

                        </div>

                    }
                </div>
            </div>

        </div>
        <!-- END EXAMPLE TABLE widget-->
    </div>
</div>

@*<script src="https://maps.googleapis.com/maps/api/js"></script>*@
<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB7X3GhN_ShrwYqU1Wc0gJbX3CMOMPZIs4"></script>

<script>



    function LoadDealer() {

        var regionID = $("#RegionID").val();
        var rangeID = $("#TransferRange").val();
        $.ajax({
            type: "POST",
            data: { id: regionID, rangeID: rangeID},
            url: "@Url.Action("GetDealerListByRegion", "Retailer")",
            dataType: 'json',
            success: function (json) {
                var $el = $("#TransferFrom");
                $el.empty(); // remove old options
                $.each(json, function (value, key) {
                    $el.append($("<option></option>")
                            .attr("value", key.ID).text(key.Name));
                });


                var $els = $("#TransferTo");
                $els.empty(); // remove old options
                $.each(json, function (value, key) {
                    $els.append($("<option></option>")
                        .attr("value", key.ID).text(key.Name));
                });
            }
        });

    }

    function LoadCities(RegionID) {
        $.ajax({
            type: "POST",
            url: "@Url.Action("GetCityListByRegionID", "Dealer")",
            data: { RegionID: RegionID },
            success: function (json) {
                debugger;
                var $el = $("#Cities");
                $el.empty(); // remove old options
                $.each(json, function (value, key) {
                    $el.append($("<option></option>").val(key.ID).text(key.Name));
                });


            }
        });
    }

    function LoadAreas(CityID) {
        $.ajax({
            type: "POST",
            url: "@Url.Action("GetAreaListByCityID", "Dealer")",
            data: { CityID: CityID == null ? 0 : CityID },
            success: function (json) {

                var $el = $("#AreaID");
                $el.empty(); // remove old options
                $.each(json, function (value, key) {
                    $el.append($("<option></option>").val(key.ID).text(key.Name));
                });
            }

        });
    }

    $(document).ready(function () {


        $('#Cities').css("width", "220px");

        $('#Cities').change(function () {

            $('#CityIDs').val($('#Cities').multipleSelect('getSelects'));

        }).multipleSelect({
            filter: true
        });


        $("#liRetailer,#liManageRetailer").addClass("active");

        var WriteCheck = "0";

        if (WriteCheck == "@HttpContext.Current.Session["WriteCheck"]") {
            // $("#btnNew").css("display", "none");
            $("#btnNew").attr("disabled", true);
        }
        else {
        }

        $("#RegionID").change(function () {
            debugger;

            LoadDealer();


        });

        $("#TransferToRange").change(function () {
            LoadTransferToDealers($(this).val())
        });

        $("#TransferRange").change(function () {
            LoadTransferFromDealers($(this).val())
        });



        function LoadTransferFromDealers(RegionalHeadID) {
            var regionID = $("#RegionID").val();
            try {
                $.ajax({
                    type: "POST",
                    data: { RegionalHeadID: RegionalHeadID, regionID: regionID},
                    url: "@Url.Action("GetAllDealersrelatedtorange", "Job")",
                    success: function (json) {

                        var $el = $("#TransferFrom");
                        $el.empty(); // remove old options
                        $.each(json, function (value, key) {
                            $el.append($("<option></option>")
                                    .val(key.SaleOfficerID).text(key.SaleOfficerName));
                        });
                    }

                });
            } catch (e) {
            }

        }


        function LoadTransferToDealers(RegionalHeadID) {
            var regionID = $("#RegionID").val();
            try {
                $.ajax({
                    type: "POST",
                    data: { RegionalHeadID: RegionalHeadID, regionID: regionID},
                    url: "@Url.Action("GetAllDealersrelatedtorange", "Job")",
                    success: function (json) {

                        var $el = $("#TransferTo");
                        $el.empty(); // remove old options
                        $.each(json, function (value, key) {
                            $el.append($("<option></option>")
                                    .val(key.SaleOfficerID).text(key.SaleOfficerName));
                        });
                    }

                });
            } catch (e) {
            }

        }

        function LoadSalesOfficer(RegionalHeadID) {

            try {
                $.ajax({
                    type: "POST",
                    data: { RegionalHeadID: RegionalHeadID },
                    url: "@Url.Action("GetAllSaleOfficerListRelatedToDealer", "Job")",
                    success: function (json) {

                        var $el = $("#SaleOfficerID");
                        $el.empty(); // remove old options
                        $.each(json, function (value, key) {
                            $el.append($("<option></option>")
                                    .val(key.SaleOfficerID).text(key.SaleOfficerName));
                        });
                    }

                });
            } catch (e) {
            }

        }

        function LoadDealers() {

            try {
                $.ajax({
                    type: "POST",
                    data: { RegionalHeadID: RegionalHeadID },
                    url: "@Url.Action("GetAllDealersListRelatedToRegionalHead", "Dealer")",
                    success: function (json) {

                        var $el = $("#DealerID");
                        $el.empty(); // remove old options
                        $.each(json, function (value, key) {
                            $el.append($("<option></option>")
                                    .val(key.ID).text(key.Name));
                        });
                    }

                });
            } catch (e) {
            }

        }

        $("#CityID").change(function () {
            LoadAreas($(this).val());
        });

        $("#btnRefresh").click(function () {
            ClearForm();
        });

    });

    $(document).ajaxComplete(function () {

    });
</script>
<script type="text/javascript">

    function ClearForm() {
        $('#Name').val('');
        $('#ShopName').val('');
        $('#LocationMargin').val('');
        $('#Phone1').val('');
        $('#Phone2').val('');
        $('#ID').val(0);
        $('#BankName2').val('');
        $('#Account2').val('');
        $('#Address').val('');
        $('#RetailerCode').val('');
        $('#LandLineNo').val('');



    }

    function OnSuccess(response) {
        if (response == "1") {
            alertify.success("Transfered Successfully");
            ClearForm();
            $('.close').trigger('click');
        }
        else if (response == "2") {
            alertify.error("Phone Number Already Exist.");
        }
        else if (response == "3") {
            alertify.error("CNIC Already Exist");
        }
        else if (response == "4") {
            alertify.error("Account No Already Exist");
        }
        else if (response == "5") {
            alertify.error("Card No Already Exist");
        }
        else {
            alertify.error("Unable To Save");
        }

    }

    function OnFailure(response) {
        if (response.status == 422) {
            var errors = JSON.parse(response.responseText);
            alertify.error(errors.errors);
        }
        else {
            alertify.error(response);
        }
    }
</script>